c
ClientUser.find_by(user: current_user).client == @client
ClientUser.find_by(user: current_user).client != @client
@client
ClientUser.find_by(user: current_user).client
ClientUser.find_by(user: current_user)
ClientUser.find_by
bug) ClientUser.find_by
c
@client
ClientUser.find_by(user: current_user).client
ClientUser.find_by(user: current_user)
current_user
ClientUser.all
c
ClietUser.find_by(user:current_user)
ClietUser.find_by(user:current_user))
ClientUser.find_by(user: current_user).client
 ClientUser.find_by(user: current_user).client != @client
c
current_user
ClientUser.find_by(user: curret_user).client != @client
c
 if notification&.save then c
 if notification&.save
notification&.save
notification.save
notification
c
check_params
c
check_params
c
 @params[:author_id].nil? && @params[:title].nil? && @params[:category_id].nil? && @current_user.nil? 
@params[:author_id] && @params[:title] && @params[:category_id] && @current_user
 check_params
c
client_user.client.sub_domain = params[:client_id]
client_user = ClientUser.find_by(user: user)
user = User.find_by(email: params[:user][:email])
c
params[:user]
params
c
params
c
ClientUser.first.user.name
 @client_user = @client.client_users.create(user: @user)
@user = User.create(client_user_params)
params
c
@user.errors.full_messages
@user.save
c
ClientUser.find_by(user:current_user).client
c
ClientUser.all
client_user
c
@user
user
@client
@user.save
c
@user.errors.full_messages
@user.save?
@user.save
c
current_user.role.title=='Admin' || current_user.role.title=='ClientAdmin'
c
current_user.role.title=='Admin' || current_user.role.title=='ClientAdmin'
c
User.all
ClientUser.all
response.status
response.request.url
c
response.request.url
c
Like.find_by(user_id: user.id)
c
Like.all
c
expect(Like.first.status).to eq(true)
c
response.status
response
publish_article
 @article = Article.find_by(id: params[:article_id])
c
params
c
 @article = Article.find_by(id: params[:article_id])
@article = Article.find(params[:id])
c
Article.all
article1
publish_article
@article = Article.find_by(id: params[:article_id])
c
@article
publish_article
@article = Article.find_by(id: params[:article_id])
 @article.nil? 
@article = Article.find(params[:id])
c
params
@article = Article.find(params[:id])
c
publish_article
c
 redirect_to root_path
root_path
c
 @client.nil?
c
@client = Client.find_by(sub_domain: params[:client_id])
params
c
 @client = Client.find_by(sub_domain: params[:client_id])
c
params
@article
c
response
c
@article.nil? 
if @article.nil? 
c
 @article
 @article = Article.find(params[:id])
c
@article
article1
publish_article_new
redirect_to articles_path(client_id: client_user.client.sub_domain)
client_user.client == @client
client_user = ClientUser.find_by(user: current_user)
c
publish_article_new
article1
c
publish_article_new
c
article1
c
publish_article_new
@article = Article.find_by(id: params[:article_id])
params
c
post "/#{client.sub_domain}/articles/#{article1.id}/approve_article_new"
article1 = FactoryBot.create(:article,client_id: client.id)
client_user = FactoryBot.create(:client_user, user_id: user.id,client_id: client.id)
c
client_user.client == @client
client_user = ClientUser.find_by(user: current_user)
c
AssignedNotifier.where(record_id: current_user.id)
AssignedNotifier
c
AssignedNotifier.first
 AssignedNotifier.all
@notifications =  AssignedNotifier.where(record_id: current_user.id)
c
@article.client_user.user_id
c
params
c
@article
c
 @client = Client.find_by(sub_domain: params[:client_id])
@client
client
c
params[:client_id]
params[:client_i]
params[:client_is
 @client = Client.find_by(sub_domain: params[:cient_id])
@client
params
c
params
c
@client_user
c
params
c
params
c
params
c
params
c
client_user&.client == @client
client_user
c
Article.count
article2
Article.all
article
      post articles_path(client_id: client.sub_domain), params: {
        article: {
          title: "Article_Title",
          category_id: category.id,
          body: 'Body'
        }}
Article.all
article1
Article.all
Article
Article.first
c
Article.all
article1
article
atcile
c
Client.all
c
response
c
response
client_articles_path
client
c
article3
c
article1.id
response
c
article1
c
client.id
article1
c
response
post article_approve_article_path(client_id: client.sub_domain, article_id: article1.id)
expect(article1.status).to eq(true)
c
Like.all
response
c
response
c
response
c
v
ClientUser.first
ClientUser.all
client_user.user
client_user
c
ClientUser.first
c
ClientUser.all
c
